# =============================================================
# GitHub Actions workflow: Deploy static site to GitHub Pages
# -------------------------------------------------------------
# * 觸發條件：push 到 main 分支（或手動執行）
# * 適用於純靜態內容（HTML/CSS/JS）。
#   如有打包流程 (React/Vite 等)，請在 Build 階段加入指令並
#   調整 upload-pages-artifact 的 path。
# =============================================================

name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]        # 依你的主要開發分支修改
  workflow_dispatch:          # 手動觸發

permissions:
  contents: read
  pages: write                # 允許寫入 GitHub Pages
  id-token: write             # OIDC 身分驗證（Pages 需要）

# 同一時間只允許一個部署進行
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # ---------- Build（可選） ----------
  build:
    runs-on: ubuntu-latest

    steps:
      # 1) 取出原始碼
      - name: Check out repository
        uses: actions/checkout@v4

      # 2) (如需) 前端打包；沒打包就跳過
      #    - name: Build site
      #      run: |
      #        npm ci
      #        npm run build
      #    # 若有 build，下面 path 請改成 ./dist 或 build 目錄

      # 3) 建立 .nojekyll，避免 Pages 誤判 Jekyll
      - name: Disable Jekyll
        run: echo "" > .nojekyll

      # 4) 設定 Pages 環境
      - name: Setup Pages
        uses: actions/configure-pages@v3

      # 5) 將站點檔案打包成 artifact（新版 v2）
      - name: Upload static files
        uses: actions/upload-pages-artifact@v2
        with:
          path: .              # 若有 build，改成 ./dist

  # ---------- Deploy ----------
  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deploy.outputs.page_url }}

    steps:
      - name: Deploy to GitHub Pages
        id: deploy
        uses: actions/deploy-pages@v2
